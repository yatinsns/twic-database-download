#!/usr/bin/env python3
"""
TWIC PGN Combiner
Extracts all ZIP files and combines PGN content into a single master PGN file.
"""

import os
import zipfile
import tempfile
import shutil
from pathlib import Path
import re
from typing import Generator

class TWICPGNCombiner:
    def __init__(self, zip_dir="twic_pgns", output_file="twic_master.pgn"):
        self.zip_dir = Path(zip_dir)
        self.output_file = Path(output_file)
        self.temp_dir = None
        self.stats = {
            'zip_files_processed': 0,
            'zip_files_failed': 0,
            'pgn_files_found': 0,
            'games_combined': 0,
            'total_size_mb': 0
        }

    def create_temp_directory(self):
        """Create a temporary directory for extraction"""
        self.temp_dir = Path(tempfile.mkdtemp(prefix="twic_extract_"))
        print(f"Created temporary directory: {self.temp_dir}")

    def cleanup_temp_directory(self):
        """Clean up temporary directory"""
        if self.temp_dir and self.temp_dir.exists():
            shutil.rmtree(self.temp_dir)
            print(f"Cleaned up temporary directory: {self.temp_dir}")

    def extract_zip_file(self, zip_path: Path) -> list:
        """Extract a ZIP file and return list of PGN files found"""
        pgn_files = []
        extract_dir = self.temp_dir / zip_path.stem

        try:
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_dir)

                # Find all PGN files in the extracted directory
                for root, dirs, files in os.walk(extract_dir):
                    for file in files:
                        if file.lower().endswith('.pgn'):
                            pgn_files.append(Path(root) / file)

            self.stats['zip_files_processed'] += 1
            self.stats['pgn_files_found'] += len(pgn_files)

        except Exception as e:
            print(f"Error extracting {zip_path.name}: {e}")
            self.stats['zip_files_failed'] += 1

        return pgn_files

    def count_games_in_pgn(self, pgn_content: str) -> int:
        """Count the number of games in PGN content"""
        # Count occurrences of "[Event " which indicates start of a new game
        return len(re.findall(r'\[Event\s+"[^"]*"\]', pgn_content))

    def read_pgn_file(self, pgn_path: Path) -> Generator[str, None, None]:
        """Read PGN file and yield individual games"""
        try:
            with open(pgn_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()

                # Split content into individual games
                # Games are separated by empty lines and start with [Event
                games = re.split(r'\n\s*\n(?=\[Event)', content)

                for game in games:
                    game = game.strip()
                    if game and '[Event' in game:
                        yield game

        except Exception as e:
            print(f"Error reading {pgn_path}: {e}")

    def combine_all_pgns(self):
        """Main method to combine all PGN files"""
        if not self.zip_dir.exists():
            print(f"ZIP directory {self.zip_dir} does not exist")
            return

        self.create_temp_directory()

        try:
            print(f"Starting PGN combination process...")
            print(f"Source directory: {self.zip_dir.absolute()}")
            print(f"Output file: {self.output_file.absolute()}")

            # Get all ZIP files, sorted by name
            zip_files = sorted(list(self.zip_dir.glob("*.zip")))
            print(f"Found {len(zip_files)} ZIP files to process")

            with open(self.output_file, 'w', encoding='utf-8') as output:
                # Write header comment
                output.write(f"[Comment \"TWIC Master Database - Combined from {len(zip_files)} archives\"]\n")
                output.write(f"[Comment \"Generated by TWIC PGN Combiner\"]\n\n")

                for i, zip_path in enumerate(zip_files, 1):
                    print(f"[{i}/{len(zip_files)}] Processing {zip_path.name}...")

                    # Extract ZIP file
                    pgn_files = self.extract_zip_file(zip_path)

                    if not pgn_files:
                        print(f"  No PGN files found in {zip_path.name}")
                        continue

                    # Process each PGN file found
                    for pgn_file in pgn_files:
                        print(f"  Reading {pgn_file.name}...")

                        games_in_file = 0
                        for game in self.read_pgn_file(pgn_file):
                            output.write(game + "\n\n")
                            games_in_file += 1
                            self.stats['games_combined'] += 1

                        print(f"    Added {games_in_file} games from {pgn_file.name}")

                    # Clean up extracted files for this ZIP
                    extract_dir = self.temp_dir / zip_path.stem
                    if extract_dir.exists():
                        shutil.rmtree(extract_dir)

                    # Print progress every 50 files
                    if i % 50 == 0:
                        print(f"Progress: {i}/{len(zip_files)} files processed, {self.stats['games_combined']} games combined so far")

        finally:
            self.cleanup_temp_directory()

    def get_output_file_size(self):
        """Get the size of the output file in MB"""
        if self.output_file.exists():
            size_bytes = self.output_file.stat().st_size
            self.stats['total_size_mb'] = round(size_bytes / (1024 * 1024), 1)
            return self.stats['total_size_mb']
        return 0

    def print_final_stats(self):
        """Print final statistics"""
        self.get_output_file_size()

        print("\n" + "="*60)
        print("PGN COMBINATION SUMMARY")
        print("="*60)
        print(f"ZIP files processed:  {self.stats['zip_files_processed']}")
        print(f"ZIP files failed:     {self.stats['zip_files_failed']}")
        print(f"PGN files found:      {self.stats['pgn_files_found']}")
        print(f"Total games combined: {self.stats['games_combined']:,}")
        print(f"Output file size:     {self.stats['total_size_mb']} MB")
        print(f"Output file:          {self.output_file.absolute()}")
        print("="*60)

    def run(self):
        """Main execution function"""
        print("TWIC PGN Combiner")
        print("="*40)

        try:
            self.combine_all_pgns()
            self.print_final_stats()

            if self.stats['games_combined'] > 0:
                print(f"\n✅ Successfully created master PGN file with {self.stats['games_combined']:,} games!")
            else:
                print("\n❌ No games were found to combine.")

        except Exception as e:
            print(f"\n❌ Error during combination: {e}")
            self.cleanup_temp_directory()

if __name__ == "__main__":
    combiner = TWICPGNCombiner()
    combiner.run()